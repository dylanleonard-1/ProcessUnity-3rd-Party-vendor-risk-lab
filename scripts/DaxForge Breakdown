# ⚙️ DaxForge: Excel Automation Engine

<p align="center">
  <img src="https://github.com/dylanleonard-1/ProcessUnity-3rd-Party-vendor-risk-lab/blob/main/generator/DaxForge_Infographic.png?raw=true" alt="DaxForge Excel Automation Engine" width="800">
</p>

---

## 🔍 Overview

**DaxForge** is the second half of the risk lab’s intelligent simulation pipeline — focused entirely on **automating Excel logic, SLA tagging, conditional formatting, and region/contact-based analysis**. It mimics what a vendor risk analyst would do manually in Excel or ProcessUnity dashboards — but performs all of it automatically, instantly.

Whether you're practicing GRC workflows in Excel, building dashboards in Power BI, or preparing for ProcessUnity integrations — DaxForge ensures every inject is clean, enriched, and fully annotated for real-world response.

---

## ⚙️ What DaxForge Does

Once injects are generated by [**CVEGenX**](https://github.com/dylanleonard-1/ProcessUnity-3rd-Party-vendor-risk-lab/blob/main/docs/cvegenx_breakdown.md), **DaxForge** takes over and applies automated logic across every row:

- ✅ **Tags SLA violations** based on exposure & patch combinations
- 🎯 **Scores risk levels** using logic that mimics ProcessUnity dashboards
- ✨ **Applies conditional formatting logic** — color codes high risk, late contact, unpatched CVEs
- 📍 **Filters and flags regions** that spike with vulnerabilities
- 🧠 **Enriches contact + metadata** with placeholder fields for outreach simulation

---

## ✅ Key Features

| Feature                        | Description                                                                 |
|-------------------------------|-----------------------------------------------------------------------------|
| **Excel automation**          | No need for manual filtering or formula work — DaxForge pre-tags everything |
| **SLA tagging**               | Flags overdue vendors or unpatched CVEs with smart logic                   |
| **Conditional formatting**    | Highlights critical risk, patch gaps, or contact failures automatically     |
| **Risk-level scoring**        | Assigns severity levels using dynamic logic (e.g. Patch=No + Exposure=Yes)  |
| **Region/contact analysis**   | Groups by continent or missing info to simulate real analyst prioritization |

---

## ⚒️ Compatible Platforms

- **Microsoft Excel** — instant use of filtered/enriched CSVs
- **Power BI** — DAX-ready outputs to build live dashboards
- **Splunk** — format-friendly injects for log ingestion
- **ProcessUnity** — mirrors real SLA flagging, contact issues, region heatmaps

---

## 🚀 Automation Steps in Action

```plaintext
1. Input raw injects (from CVEGenX)
2. DaxForge runs tagging + logic scripts
3. SLA flags, risk scores, missing data get annotated
4. Final output → Excel / Power BI / Splunk / ProcessUnity
```

Run via:

```bash
bash scripts/auto_enrich.sh
```

---

## 🧠 Behind the Logic

Each step in DaxForge was reverse-engineered from how analysts use Excel & GRC platforms:

- `IF` + `VLOOKUP` + `ISBLANK` logic converted to code
- Outreach flags injected where contact is missing
- Risk scores tiered by patch/exposure conditions
- Visual cues prebuilt for conditional formatting

---

## 📷 Visual Demo

<p align="center">
  <img src="https://github.com/dylanleonard-1/ProcessUnity-3rd-Party-vendor-risk-lab/blob/main/generator/DaxForge_Infographic.png?raw=true" alt="DaxForge Infographic Demo" width="800">
</p>

> From chaos to clarity — this engine replicates what Excel analysts take 30+ minutes to do, in under 2 seconds.

---

## 🔗 Related Pages

- [CVEGenX Generator Breakdown →](https://github.com/dylanleonard-1/ProcessUnity-3rd-Party-vendor-risk-lab/blob/main/docs/cvegenx_breakdown.md)  
- [Power BI Dashboard Examples →](https://github.com/dylanleonard-1/vendor-risk-lab/tree/main/powerbi_dashboards)  
- [Splunk SOAR Playbooks →](https://github.com/dylanleonard-1/vendor-risk-lab/tree/main/splunk_soar)

---

> **DaxForge** — Built to automate the analyst’s logic, at machine speed.  
Compatible with Excel, Power BI, Splunk, and ProcessUnity workflows.
